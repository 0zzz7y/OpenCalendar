version: "3.8"

# ───────────────────────── Services ─────────────────────────
services:
  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/open_calendar_database
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JWT_SECRET_KEY: open-calendar-jwt-secret-key
      SPRING_CACHE_HOST: redis
      SPRING_CACHE_PORT: 6379
    depends_on:
      - redis
      - postgres
    networks:
      - opencalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      VITE_API_URL: http://localhost:8080
    networks:
      - opencalendar-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command:
      - redis-server
      - "--save"
      - "60"
      - "1"
      - "--loglevel"
      - "warning"
    networks:
      - opencalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: open_calendar_database
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - opencalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d open_calendar_database"]
      interval: 30s
      timeout: 10s
      retries: 5

# ───────────────────────── Networks ─────────────────────────
networks:
  opencalendar-network:
    driver: bridge

# ───────────────────────── Volumes ─────────────────────────
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/postgresql/data
      o: bind
